[{"body":"FHIR Shorthand (“FSH” or “Shorthand”) is a specially-designed language for defining the content of Health Level Seven (HL7®) Fast Healthcare Interoperability Resources (FHIR®) Implementation Guides (IGs). It is simple and compact, with tools to produce Fast Healthcare Interoperability Resources (FHIR) profiles, extensions and IGs.\nSUSHI (“SUSHI Unshortens ShortHand Inputs”) is a reference implementation of an interpreter/compiler for the FSH language. SUSHI produces FHIR profiles, extensions, and other artifacts needed to create FHIR Implementation Guides (IG).\nFSH School Conventions The following style conventions are used throughout the FSH School content:\n   Style Explanation Example     Code Code fragments, such as commands, FSH statements, and syntax expressions * status = #open   {curly braces} An item to be substituted in a syntax expression {display string}   \u003cdatatype\u003e An element or path to an element with the given data type, to be substituted in the syntax expression \u003cCodeableConcept\u003e   italics An optional item in a syntax expression ”{string}“   ellipsis (…) Indicates a pattern that can be repeated {flag1} {flag2} {flag3} …   bold A directory path or file name example-1.fsh    In addition, the following symbols are used in documented commands:\n   Symbol Explanation      Indicates information or command specific to OS X. Commands can be run within the Terminal application.    Indicates information or command specific to Windows. A command window can be launched by typing cmd at the Search Windows tool.    Represents command prompt (may vary depending on platform)    Understanding FHIR Shorthand Some sections of FSH School assume a basic understanding of FHIR Shorthand. You can access the FHIR Shorthand documentation at any time by clicking the “FHIR Shorthand” link in the left-hand column.\nWe recommend new FSH authors start with the overview and review the language reference when additional details are needed.\nUnderstanding FHIR Profiling Most FSH School resources assume a basic understanding of FHIR and FHIR profiling. You can access the FHIR documentation at any time by clicking the “FHIR R4” link in the left-hand column. You may find the following more specific links helpful as well:\n Profiling: Provides information and guidance on profiling topics such as constraining and slicing. Extensibility: Provides information about using and defining extensions. Resources: Lists all FHIR resources. Useful for referencing available elements as you write profiles. DataTypes: Lists all FHIR datatypes. Useful for understanding types declared in resource elements. StructureDefinition: Documents StructureDefinition (basis for resources, profiles, and extensions). Useful for authoring top-level caret rules. ElementDefinition: Documents ElementDefinition (basis for elements in resources, profile, and extensions). Useful for authoring path-specific caret rules. Guidance for FHIR IG Creation: (Work in Progress) Documents the new template-based publishing framework. IG Publisher: Documents how to use and configure the HL7 IG Publisher.  ","excerpt":"FHIR Shorthand (“FSH” or “Shorthand”) is a specially-designed language …","ref":"/docs/getting-started/","title":"Getting Started"},{"body":"Step 1: Install Node.js SUSHI requires Node.js. To install Node.js, go to https://nodejs.org/ and select the “LTS” download. If the download is not appropriate for your operating system, click the “Other Downloads” link to get a full list of downloads. Once the installer is downloaded, run it using the default options.\nEnsure that Node.js is correctly installed by opening a command window and typing the following two commands. Each command should return a version number.\n node --version  npm --version Step 2: Install SUSHI To install SUSHI, open up a command prompt and type the following command:\n npm install -g fsh-sushi Check the installation via the command below:\n sushi -h If the command outputs instructions on using the SUSHI command line interface (CLI), you’re ready to run SUSHI.\nUse sushi -v to display the installed version of SUSHI and the version of the FSH specification it supports. SUSHI follows the semantic versioning convention (MAJOR.MINOR.PATCH):\n MAJOR: A major release has significant new functionality and, potentially, grammar changes or other non-backward-compatible changes. MINOR: Contains new or modified features, while maintaining backwards compatibility within the major version. PATCH: Contains minor updates and bug fixes, while maintaining backwards compatibility within the major version.  Tip For the most up-to-date information and latest releases of SUSHI, check the release history and release notes.  Updating or Reverting SUSHI To update SUSHI to the latest version, re-run:\n npm install -g fsh-sushi To revert to a previous version of SUSHI, run:\n npm install -g fsh-sushi@{version} where the {version} is replaced by the desired MAJOR.MINOR.PATCH version (e.g., npm install -g fsh-sushi@0.14.0).\n","excerpt":"Step 1: Install Node.js SUSHI requires Node.js. To install Node.js, go …","ref":"/docs/sushi/installation/","title":"Installation"},{"body":"FHIR Shorthand (FSH) is a specially-designed language for defining the content of FHIR Implementation Guides (IGs). It is simple and compact, with tools to produce Fast Healthcare Interoperability Resources (FHIR) profiles, extensions and IGs. FSH is compiled from text files to FHIR artifacts using SUSHI. To get started using FSH, you need to install and run SUSHI using the steps below.\nStep 1: Review Getting Started If you haven’t done so already, please read or review the Getting Started documentation to gain an understanding of the conventions used in this tutorial and the resources available to you.\nStep 2: Install Node.js and Sushi If you have not already installed SUSHI, follow the SUSHI Installation instructions.\nStep 3: Download Sample FSH Tank To start with some working examples of FSH files and a skeleton FSH tank,  download the FSH Tutorial Starter and unzip it into a directory of your choice.\nAfter the file is unzipped, you should see two subdirectories:\n FishExample FishExampleComplete  Change the working directory to FishExample. There are two FSH files:\n FishPatient.fsh Veterinarian.fsh  In addition, there is a config.yaml file and a subdirectory, /ig-data, containing some inputs for building the IG.\nStep 4: Run SUSHI Now that you have SUSHI installed and a minimal FSH tank, open up a command window, and navigate to the FishExample directory. Run SUSHI on those FSH files by executing:\n sushi .  Note The dot (.) represents “this directory,” the location of the FSH files. You can also specify the location explicitly by replacing the dot with a directory path.  Running SUSHI will create a FishExample/build/input/resources directory, and populate it with the files needed to create the IG using the HL7 FHIR IG Publisher tool.\nWhile running SUSHI, there will be a series of informational message. When SUSHI completes, you should see a summary output similar this:\n╔════════════════════════ SUSHI RESULTS ══════════════════════════╗ ║ ╭──────────┬────────────┬───────────┬─────────────┬───────────╮ ║ ║ │ Profiles │ Extensions │ ValueSets │ CodeSystems │ Instances │ ║ ║ ├──────────┼────────────┼───────────┼─────────────┼───────────┤ ║ ║ │ 2 │ 0 │ 0 │ 0 │ 0 │ ║ ║ ╰──────────┴────────────┴───────────┴─────────────┴───────────╯ ║ ║ ║ ║ See SUSHI-GENERATED-FILES.md for details on generated IG files. ║ ╠═════════════════════════════════════════════════════════════════╣ ║ Nice! You're totally krilling it! 0 Errors 0 Warnings ║ ╚═════════════════════════════════════════════════════════════════╝ The files generated by SUSHI are located in the FishExample/build directory. Check that the build/input/profiles subdirectory contains two generated StructureDefinitions.\nStep 5: Generate the Sample IG Now change working directory of the command window to the build directory. At the command prompt, enter:\n  _updatePublisher   ./_updatePublisher.sh This will download the latest version of the HL7 FHIR IG Publisher tool into ./build/input-cache. This step can be skipped if you already have run the command recently, and have the latest version of the IG Publisher tool.\nTip If you are blocked by a firewall, or if for any reason _updatePublisher fails to execute, download the current IG Publisher jar file here. When the file has downloaded, move it into the directory /FishExample/build/input-cache (creating the directory if necessary).  Warning Before proceeding to the next command: If you have never run the IG Publisher, you may need to install Jekyll first. See Installing the IG Publisher for details.  Now run:\n  _genonce   ./_genonce.sh This will run the HL7 FHIR IG generator, which may take several minutes to complete.\nAfter the publisher is finished, open the file /FishExample/build/output/index.html to see the resulting IG.\nIf you click on the Artifacts Summary item in the menu, you will see that the IG contains two profiles, FishPatient and Veterinarian. If you look at each of them, you will notice that they have minimal differentials. The only way in which they differ from their base resource is that they require at least one name.\nStep 6: Setting Cardinalities in a Profile It is not widely known, but FHIR is designed to be used for veterinary medicine as well as human. For a non-human patient, we need to record the species. The Patients in this Tutorial are going to be various species of fish 🐟.\nSince fish don’t get legally married (although some species do pair bond) and they don’t communicate in a human language, the first thing we’ll do in the FishPatient profile is eliminate these elements. To do this, open the file FishPatient.fsh in your favorite plain-text editor, and add the following rules after the last non-blank line in the file:\n* maritalStatus 0..0 * communication 0..0 Note that rules start with *. FSH expresses cardinality as, {min}..{max}, the same as FHIR.\nStep 7: Create a Species Extension for FishPatient To specify the species of our aquatic patients, we’ll need an extension.\nWe have a choice of whether to make the extension inline or standalone. Inline extensions do not result in a separate StructureDefinition, and cannot be reused in other profiles. Standalone extensions are the opposite: they have independent StructureDefinitions, and can be reused. For this example, let’s make a standalone extension.\nExtensions are created using the contains keyword. To add a standalone species extension, add the following rule after the cardinality rules:\n* extension contains FishSpecies named species 0..1 This rule states that the extension array of the Patient resource will incorporate the FishSpecies extension with the local name species.\nTo define the FishSpecies extension, add the following lines to the end of the FishPatient.fsh file:\nExtension: FishSpecies Id: fish-species Title: \"Fish Species\" Description: \"The species of the fish.\"  Tip FSH ignores extra whitespace, so authors can choose to use whitespace for improved visual alignment, as in the extension definition above.  Run SUSHI again (sushi .). The count of Extensions should now be 1.\nStep 8: Define a Value Set for Fish Species The FishSpecies extension doesn’t quite do its job yet, because we haven’t specified what type of values it might accept. To add this information, enter these lines following the description of FishSpecies:\n* value[x] only CodeableConcept * valueCodeableConcept from FishSpeciesValueSet (extensible) The first rule restricts the value[x] (a built-in element of every FHIR extension) to a CodeableConcept using the only keyword. The second binds it to a value set (yet to be defined) using the from keyword. The binding strength will be extensible, meaning the codes in the FishSpeciesValueSet must be used except when the value set is missing a specific fish species.\nTo define FishSpeciesValueSet, add the following lines to the same file:\nValueSet: FishSpeciesValueSet Title: \"Fish Species Value Set\" Id: fish-species-value-set Description: \"Codes describing various species of fish, taken from SNOMED-CT.\" * codes from system http://snomed.info/sct where concept is-a SCT#90580008 \"Fish (organism)\"  Info The rule in the value set definition above selects all codes from SNOMED-CT that are children of the concept “Fish (organism)”.  Run SUSHI again. The count of ValueSets should now be 1. Try generating the IG by changing directories to build and running _genonce again. Open the file /FishExample/build/output/index.html to see the resulting IG.\n Do you see where the FishPatient profile is in the IG? Does the differential reflect your changes? How does FHIR render the value set you defined?  Step 9: Define an Alias An Alias is a way to define a shorthand for a URL or OID. For example, in the value set definition above, we could have defined an Alias to make referencing the http://snomed.info/sct URL easier, as shown below. Aliases are conventionally defined at the top of the file.\nAdd this line at the top of the FishPatient.fsh file:\nAlias: SCT = http://snomed.info/sct and then replace the last line in the FishSpeciesValueSet with:\n* codes from system SCT where concept is-a #90580008 \"Fish (organism)\"  Tip Using aliases has no effect on the IG; it simply makes the FSH code a bit neater.  Step 10: Create an Instance of FishPatient Every IG should provide examples of its profiles. Let’s do that by introducing an example FishPatient named Shorty. Create this example instance using the Instance keyword, with InstanceOf set to FishPatient and Usage set to Example.\nInclude the following information about Shorty in the instance:\n His given (first) name is “Shorty” and his family (last) name is “Koi-Fish”. Shorty is a Koi fish (Cyprinus rubrofuscus), represented as SNOMED-CT code 47978005 “Carpiodes cyprinus (organism)”.  If you need help with this, you can reference the Defining Instances section of the specification. If you still need help, you can peek at the FSH files in the FishExampleComplete directory.\nRun SUSHI again, and re-generate the IG.\n Did it compile without errors? What does the IG look like now?  Step 11: Extend the Veterinarian Profile Now, add constraints and/or extensions to the Veterinarian profile:\n  Add qualifications consistent with a Veterinary practice. Qualifications are taken from code system http://nucc.org/provider-taxonomy, and the code is 174M00000X, for “Veterinarian”.\n  In addition, slice the identifier array, making a license number required. The code system is http://terminology.hl7.org/CodeSystem/v2-0203 and the code is LN, for “License number”.\n  If you need help with this, you can refer to the assignment rules and slicing rules sections of the specification. If you still need help, you can peek at the FSH files in the FishExampleComplete directory.\nRun SUSHI again, and re-generate the IG.\n Did it compile without errors? What does the IG look like now?  Congratulations! You’ve completed the FSH tutorial. It might be time to feast on some sushi!\n","excerpt":"FHIR Shorthand (FSH) is a specially-designed language for defining the …","ref":"/docs/tutorials/basic/","title":"Basic Tutorial"},{"body":"Simple FSH Projects The simplest FSH project (sometimes referred to as a “FSH tank”) contains only a configuration file and FSH files containing FHIR Shorthand definitions. For example, a simple FSH tank might look like this:\nsimple-project ├── config.yaml ├── file1.fsh ├── file2.fsh └── file3.fsh The config.yaml file provides project configuration data to SUSHI. It is described further in the Configuration documentation.\nEach FSH file can contain multiple FSH definitions of varying types. FSH file names are not significant, but must end with the .fsh extension. In addition, FSH files can be organized into subdirectories. This provides authors the flexibility to organize their FSH definitions in whatever way makes sense to then.\nTip A simple FSH project like the one shown above can be used with a minimal config.yaml file to create a bare-bones IG . It can also be used to generate only the FHIR resources by specifying the FSHOnly flag in config.yaml. Most authors who want to develop an IG using SUSHI, however, will also use an ig-data directory. Continue reading for more details.  Using a fsh Subdirectory with the HL7 IG Publisher and Auto-Builder If a project is intended to be built by the HL7 IG Publisher Auto-Builder, the FSH tank should be located in a fsh subdirectory:\nsimple-ig └── fsh ├── config.yaml ├── file1.fsh ├── file2.fsh └── file3.fsh When the IG Publisher detects a fsh subdirectory, it will automatically run SUSHI on that directory and output the SUSHI results to the parent of the fsh subdirectory (e.g., the simple-ig directory in the example above). It will then continue with the normal IG Publisher process.\nThis approach allows a GitHub repository to be configured such that whenever changes to FSH files are pushed to GitHub, the Auto-Builder will pick them up, run the SUSHI/IG Publisher process, and publish the resulting IG to http://build.fhir.org.\nNote Using a fsh subdirectory is not required, but since many authors prefer this option, the remaining documentation assumes a fsh subdirectory in its file structures.  IG Projects SUSHI provides support for many of the files and directories required by the template-based IG Publisher for building Implementation Guides. Many IG customizations can be configured using additional properties in the config.yaml file.\nAdditionally, authors can create and populate the ig-data directory with custom content for package-list.json, ig.ini, menu.xml, index.md (or index.xml), pages, images, and other IG Publisher inputs. For example, a FSH project for a customized IG might look like this:\ncustomized-ig └── fsh ├── config.yaml ├── file1.fsh ├── file2.fsh ├── file3.fsh └── ig-data ├── ig.ini ├── input │ ├── ignoreWarnings.txt │ ├── images │ │ ├── myDocument.pdf │ │ ├── myGraphic.png │ │ └── mySpreadsheet.xlsx │ ├── includes │ │ └── menu.xml │ └── pagecontent │ ├── 1_mySecondPage.md │ ├── 2_myThirdPage.md │ ├── 3_myFourthPage.md │ └── index.md └── package-list.json You can populate your project (under fsh above) as follows:\n config.yaml: This required file provides project configuration data to SUSHI. It is described further in the Configuration documentation. *.fsh: FSH files contain the FHIR Shorthand definitions for all the resources and examples in your IG. ig-data/ig.ini: If present and no template property is specified in config.yaml, the user-provided file will be used instead of a generated one. ig-data/input/ignoreWarnings.txt: If present, this file can be used to suppress specific QA warnings and information messages during the FHIR IG publication process. ig-data/input/images/*: Put anything that is not a page in the IG, such as images, spreadsheets or zip files, in the ig-data/input/images subdirectory. These files will be copied into the build and can be referenced by user-provided pages or menus. ig-data/input/includes/menu.xml: If present and no menu property is specified in config.yaml, this file will be used for the IG’s main menu layout. ig-data/input/pagecontent/*: Put either markup (.xml) or markdown (.md) files with the narrative content of your IG in the ig-data/input/pagecontent/ subdirectory. These files are the sources for the html pages that accompany the automatically-generated pages of your IG. The header and footer of these pages are automatically generated, so your content should not include these elements. Any number of pages can be added. In addition to stand-alone pages, you can provide additional text for generated artifact pages. The naming of these files is significant:  index.xml|md: This file provides the content for the IG’s main page, unless the indexPageContent property is specified in config.yaml, in which case this file should not exist. Providing an index file is strongly recommended over inlining the content in config.yaml. N_pagename.xml|md: If present, these files will be generated as individual pages in the IG. The leading integer (N) determines the order of the pages in the table of contents. These numbers are stripped and do not appear in the actual page URLs. {artifact-file-name}-intro.xml|md: If present, the contents of the file will be placed on the relevant page before the artifact’s definition. {artifact-file-name}-notes.xml|md: If present, the contents of the file will be placed on the relevant page after the artifact’s definition.   ig-data/input/{supported-resource-input-directory}/* (not shown above): JSON files in supported resource directories (e.g., profiles, extensions, examples, etc.) will be be copied to the corresponding locations in the IG input and processed as additional (non-FSH) IG resources. This feature is not expected to be commonly used. ig-data/package-list.json: This optional file, described here, should contain the version history of your IG. If present and no history property is specified in config.yaml, it will be used instead of a generated package-list.json.  Tip Examples of package.json, ig.ini, package-list.json, ignoreWarnings.txt and menu.xml files can be found in the sample IG project provided for this purpose. In addition, more general guidance can be found in Guidance for HL7 IG Creation. For a real-world example of a populated ig-data directory, see the mCODE Implementation Guide.  ","excerpt":"Simple FSH Projects The simplest FSH project (sometimes referred to as …","ref":"/docs/sushi/project/","title":"Project Structure"},{"body":"This section contains documentation for SUSHI (SUSHI Unshortens ShortHand Inputs), a reference implementation FSH compiler.\n","excerpt":"This section contains documentation for SUSHI (SUSHI Unshortens …","ref":"/docs/sushi/","title":"SUSHI"},{"body":"The HL7 FHIR IG Publisher relies on several configuration files, including ig.ini, package-list.json, menu.xml, and an instance of the ImplementationGuide resource. Splitting information among multiple files and managing different formats makes IG configuration difficult to manage.\nSUSHI offers the same functionality in a single config.yaml file, allowing all configuration to be in a consistent format with no duplication of information. This file is written using YAML. Authors unfamiliar with YAML should note that:\n White space (new lines and indentation) is significant Information is presented in key: value pairs Strings do not have to be quoted unless they contain reserved characters, such as colon (:) Arrays/sequences are created using -  Minimum Configuration At a minimum, the config.yaml file must provide a few high-level metadata values for the FSH project:\nid:fhir.us.examplecanonical:http://hl7.org/fhir/us/examplename:ExampleIGstatus:draftversion:0.1.0fhirVersion:4.0.1copyrightYear:2020+releaseLabel:ci-buildtemplate:hl7.fhir.template#0.0.5 Download Minimum Configuration Example\n For an official HL7 project, the id and canonical will typically be assigned by the FHIR Product Director. Valid values for status include:  draft: The IG is still under development and is not yet considered to be ready for normal use. active: The IG is ready for normal use. retired: The IG has been withdrawn or superseded and should no longer be used. unknown: It is not know which of the status values currently applies for the IG. This should be rare.   Since SUSHI currently supports only FHIR R4, the fhirVersion should always be 4.0.1. Valid values for the releaseLable include:  ci-build: the continuous integration build release (not stable) draft: draft version qa-preview: frozen snapshot for non-ballot feedback ballot: frozen snapshot for ballot trial-use: official release with ‘trial use’ status release: official release for use update: official release with ‘trial use’ status - posted as an un-balloted STU update normative+trial-use: official release with mixture of trial use and normative content   The template value consists of a template id and version separated by #. This value will be reflected in the generated ig.ini file for your project. For the most up-to-date list of templates, see the Guidance for FHIR IG Creation.  FSH-Only If an author wants SUSHI only to build the FHIR definition files, and not to do any additional Implementation Guide (IG) processing, then the author should add a FSHOnly flag to the configuration and set its value to true:\nFSHOnly:trueRecommended Configuration In addition to the minimum configuration requirements shown above, most IG authors will also want to provide a title, description, license, publisher, and dependencies:\nid:fhir.us.examplecanonical:http://hl7.org/fhir/us/examplename:ExampleIGtitle:\"HL7 FHIR Implementation Guide: Example IG Release 1 - US Realm | STU1\"description:AnexampleIGthatexercisesmanyofthefieldsinaSUSHIconfigurationstatus:draftlicense:CC0-1.0version:0.1.0fhirVersion:4.0.1copyrightYear:2020+releaseLabel:ci-buildpublisher:name:HL7International- USRealmSteeringCommitteeurl:http://www.hl7.org/Special/committees/usrealm/index.cfmemail:usrsc@lists.HL7.orgdependencies:hl7.fhir.us.core:3.1.0template:hl7.fhir.template#0.0.5 Download Recommended Configuration Example\n The license value should come from the SPDX Licence Value Set, although most FHIR IGs use the CC0-1.0 (Creative Commons Zero v1.0 Universal) license. The dependencies value is a YAML object for which the keys are each dependency’s package id and the values are the dependency versions. In addition to standard version identifiers, the following two special versions are supported:  dev: indicates that the dependency should be loaded from the local FHIR cache current: indicates that the dependency should be loaded from the last successful auto-build.   The dependencies property also supports an advanced syntax that allows you to directly specify the dependency URI if necessary. For example: dependencies:hl7.fhir.us.mcode:uri:http://hl7.org/fhir/us/mcodeversion:1.0.0  Full Configuration The table below lists all configuration properties that can be used in SUSHI’s config.yaml file. Most SUSHI configuration properties come directly from the Implementation Guide resource and will be translated into the generated ImplementationGuide resource for your project. Differences between the config.yaml properties and ImplementationGuide properties are noted below.\n   Property Corresponding IG element Usage     id id As specified in the IG resource   meta meta As specified in the IG resource   implicitRules implicitRules As specified in the IG resource   language language As specified in the IG resource   text text As specified in the IG resource   contained contained As specified in the IG resource   extension extension As specified in the IG resource   modifierExtension modifierExtension As specified in the IG resource   url url As specified in the IG resource. If not specified, defaults to {canonical}/ImplementationGuide/{id}.   version version As specified in the IG resource   name name As specified in the IG resource   title title As specified in the IG resource   status status As specified in the IG resource   experimental experimental As specified in the IG resource   date date As specified in the IG resource   publisher publisher, with cardinality changed to 0..* Publisher can be a single item or a list, each with a name and optional url and/or email. The first publisher’s name will be used as IG.publisher. The contact details and/or additional publishers will be translated into IG.contact values   contact contact As specified in the IG resource   description description As specified in the IG resource   useContext useContext As specified in the IG resource   jurisdiction jurisdiction As specified in the IG resource   copyright copyright As specified in the IG resource   packageId packageI As specified in the IG resource. If not specified, defaults to id.   license license As specified in the IG resource   fhirVersion fhirVersion As specified in the IG resource   dependencies dependsOn A key: value pair, where key is the package id and value is the version (or dev/current). For advanced use cases, the value can be an object with keys for uri and version.   global global Key is the type and value is the profile   groups definition.grouping A key: value pair, where key is the name of the group and value is the description of the group   resources definition.resource SUSHI can auto-generate a list of resources based on FSH definitions and provided JSON resources, but this property can be used to add additional entries or override generated entries. SUSHI uses the {resource type}/{resource name} format as the YAML key (corresponding to IG.definition.resource.reference). Authors can specify the value “omit” to omit a FSH-generated resource from the resource list. groupingId can be used, but top-level groups syntax may be a better option.   pages definition.page SUSHI can auto-generate pages, but authors can manage pages through this property. If this property is used, SUSHI will not generate any page entries. The YAML key is the file name containing the page. The title key-value pair provides the title for the page. If a title is not provided, then the title will be generated from the file name. If a generation value (corresponding to definition.page.generation) is not provided, it will be inferred from the file name extension. In the IG resource, pages can contain sub-pages; so in the config file, any sub-properties that are valid filenames with supported extensions (e.g., .md/.xml) will be treated as sub-pages.   parameters definition.parameter The key is the code. If a parameter allows repeating values, the value in the YAML may be a sequence/array.   templates definition.template As specified in the IG resource   copyrightYear or copyrightyear N/A Used to add a copyrightyear parameter to IG.definition.parameter   releaseLabel or releaselabel N/A Used to add a releaseLabel parameter to IG.definition.parameter   canonical N/A The canonical URL to be used throughout the IG   template N/A Template used in ig.ini file. Authors can provide their own ig.ini file by removing this property and placing an igi.ini file in the ig-data directory.   menu N/A Used to generate the input/index.md file. The key is the menu item name and the value is the URL. Menus can contain sub-menus, but the IG Publisher currently only supports sub-menus one level deep. Authors can provide their own menu.xml by removing this property and placing a menu.xml file in ig-data/input/includes   history N/A Used to create a package-list.json. SUSHI will use the existing top-level properties in its config to populate the top-level package-list.json properties: package-id, canonical, title, and introduction. Authors who wish to provide different values can supply them as properties under history. All other properties under history are assumed to be versions. Additionally, the current version is special. If the author provides only a single string value, it is assumed to be the URL path to the current build. The following default values will then be used: desc: Continuous Integration Build (latest in version control), status: ci-build, and current: true. Authors can provide their own package-list.json by removing this property and placing a package-list.json file in ig-data.   indexPageContent N/A This property is provided for backwards compatibility reasons, and its use is discouraged. It was used to specify the content of index.md, however, authors should provide their own index file by not using this property and placing an index.md or index.html file in input/pages or input/pagecontent.   FSHOnly N/A When this flag is set to true, no IG specific content will be generated, SUSHI will only convert FSH definitions to JSON files. When false or unset, IG content is generated.    Exhaustive Example The following provides an exhaustive example config.yaml covering many of the properties discussed above.\n# This IG YML file is inspired by the ImplementationGuide resource# and also draws from package.json, package-list.json, and ig.ini.# That said, it is structured for ease-of-use, so it is not strictly# conformant to any of those existing configuration formats.# SUSHI will use id as both id and packageId in the IG unless a# specific packageId is also provided in this file.id:fhir.us.examplecanonical:http://hl7.org/fhir/us/exampleurl:http://hl7.org/fhir/us/example/ImplementationGuide/fhir.us.examplename:ExampleIGtitle:\"HL7 FHIR Implementation Guide: Example IG Release 1 - US Realm | STU1\"description:ExampleIGexercisesmanyofthefieldsinaSUSHIconfiguration.status:activelicense:CC0-1.0date:2020-02-26version:1.0.0# Although fhirVersions is 0..* in the ImplementationGuide resource# it can be a single item OR and array here (but so far SUSHI only# supports 4.0.1 anyway).fhirVersion:4.0.1# The template property will be used to generate an ig.ini file.# To provide a custom ig.ini file, do not include this property and# include an `ig.ini` file in ig-data.template:hl7.fhir.template#0.0.5# The following two lines correspond to items that used to be in# ig.ini but were moved to IG.definition.parameter. For# consistency within this file, the names are represented using# camelcase, but if authors use the formal parameter names, SUSHI# will recognize them as well. In either case, they'll be copied# to the IG JSON using the formal names.copyrightYear:2019+releaseLabel:STU1# The publisher can be a single item or a list, each with a name and# optional url and/or email. The first publisher's name will be used# as IG.publisher. The contact details and/or additional publishers# will be translated into IG.contact values.publisher:name:HL7FHIRManagementGroupurl:http://www.hl7.org/Special/committees/fhirmgemail:fmg@lists.HL7.org# Those who need more control or want to add additional details to the contact values can use# contact directly and follow the format outlined in the ImplementationGuide resource and# ContactDetail.contact:- name:BobSmithtelecom:- system:emailvalue:bobsmith@example.orguse:work# The jurisdiction can be a single item or a list. The FHIR Shorthand# code syntax can be used here.jurisdiction:urn:iso:std:iso:3166#US \"United States of America\"# The dependencies property corresponds to IG.dependsOn. The key is the# package id and the value is the version (or dev/current). For advanced# use cases, the value can be an object with keys for `uri` and `version`.dependencies:hl7.fhir.us.core:3.1.0hl7.fhir.us.mcode:uri:http://hl7.org/fhir/us/mcodeversion:1.0.0# The global property corresponds to the IG.global property, but it# uses the type as the YAML key and the profile as its value. Since# FHIR does not explicitly disallow more than one profile per type,# neither do we; the value can be a single profile URL or an array# of profile URLs.global:Patient:http://example.org/fhir/StructureDefinition/my-patient-profileEncounter:http://example.org/fhir/StructureDefinition/my-encounter-profile# The resources property corresponds to IG.definition.resource.# SUSHI can auto-generate all of the resource entries based on# the FSH definitions and/or information in any user-provided# JSON resource files. If the generated entries are not# sufficient or complete, however, the author can add entries# here. If the reference matches a generated entry, it will# replace the generated entry. If it doesn't match any generated# entries, it will be added to the generated entries. The format# follows IG.definition.resource with the following differences:# * use IG.definition.resource.reference.reference as the YAML key# * specify \"omit\" to omit a FSH-generated resource from the# resource list.# * groupingId can be used, but top-level groups syntax may be a# better option (see below).# The following are simple examples to demonstrate what this might# look like:resources:Patient/my-example-patient:name:MyExamplePatientdescription:AnexamplePatientexampleBoolean:truePatient/bad-example:omit# Groups can control certain aspects of the IG generation. The IG# documentation recommends that authors use the default groups that# are provided by the templating framework, but if authors want to# use their own instead, they can use the mechanism below. This will# create IG.definition.grouping entries and associate the individual# resource entries with the corresponding groupIds.groups:GroupA:description:TheAlphaGroupresources:- StructureDefinition/animal-patient- StructureDefinition/arm-procedureGroupB:description:TheBetaGroupresources:- StructureDefinition/bark-control- StructureDefinition/bee-sting# The pages property corresponds to IG.definition.page. SUSHI can# auto-generate the page list, but if the author includes pages in# this file, it is assumed that the author will fully manage the# pages section and SUSHI will not generate any page entries.# The page file name is used as the key. If title is not provided,# then the title will be generated from the file name. If a# generation value is not provided, it will be inferred from the# file name extension. Any subproperties that are valid filenames# with supported extensions (e.g., .md/.xml) will be treated as# sub-pages.pages:index.md:title:ExampleHomeimplementation.xml:examples.xml:title:ExamplesOverviewsimpleExamples.xml:complexExamples.xml:# The ImplementationGuide resource defines several other properties# not represented above. These properties can be used as-is and# should follow the format defined in ImplementationGuide:# * meta# * implicitRules# * language# * text# * contained# * extension# * modifierExtension# * experimental# * useContext# * copyright# * packageId# The menu property will be used to generate the input/menu.xml file.# The menu is represented as a simple structure where the YAML key# is the menu item name and the value is the URL. The IG publisher# currently only supports one level deep on sub-menus.# To provide a custom menu.xml file, do not include this property and# include a `menu.xml` file in input/includes.menu:Home:index.htmlArtifacts:Profiles:artifacts.html#2Extensions:artifacts.html#3Value Sets:artifacts.html#4Downloads:downloads.htmlHistory:http://hl7.org/fhir/us/example/history.html# The parameters property represents IG.definition.parameter. Rather# than a list of code/value pairs (as in the ImplementationGuide# resource), the code is the YAML key. If a parameter allows repeating# values, the value in the YAML should be a sequence/array. For a# partial list of allowed parameters see:# https://confluence.hl7.org/display/FHIR/Implementation+Guide+Parametersparameters:excludettl:truevalidation:[allow-any-extensions,no-broken-links]# The history property corresponds to package-list.json. SUSHI will# use the existing top-level properties in its config to populate the# top-level package-list.json properties: packageId, canonical, title,# and introduction. Authors that wish to provide different values can# supply them as properties under history. All other properties under# history are assumed to be versions. To provide a custom package-list.json# file, remove this property and include a package-list.json file in ig-data.history:# The current version is special. If the author provides only a# single value, it is assumed to be the URL path to the current# build. The following default values will then be used:# desc: Continuous Integration Build (latest in version control)# status: ci-build# current: truecurrent:http://build.fhir.org/ig/HL7/example-ig/# All other versions need each of their values fully specified.# See: https://confluence.hl7.org/pages/viewpage.action?pageId=66928420#FHIRIGPackageListdoco-PublicationObject1.0.0:fhirversion:4.0.1date:2020-03-06desc:STU1Releasepath:https://hl7.org/fhir/us/example/STU1/status:trial-usesequence:STU1current:true0.9.1:fhirversion:4.0.0date:2019-06-10desc:InitialSTUballot(Sep2019Ballot)path:https://hl7.org/fhir/us/example/2019Sep/status:ballotsequence:STU1# The indexPageContent property is used to generate a basic index.md file. To provide a# custom index file, do not include this property and include an index.md or index.xml file# in input/pages/ or input/pagecontent folders.indexPageContent:'Example Index Page Content'# The FSHOnly flag indicates if only FSH resources should be exported.# If set to true, no IG related content will be generated.# The default value for this property is false.FSHOnly:false Download Exhaustive Configuration Example\n","excerpt":"The HL7 FHIR IG Publisher relies on several configuration files, …","ref":"/docs/sushi/configuration/","title":"Configuration"},{"body":"This section several tutorials that will walk you through the process of using FSH to make a FHIR Implementation Guide.\n","excerpt":"This section several tutorials that will walk you through the process …","ref":"/docs/tutorials/","title":"Tutorials"},{"body":"Coming Soon!\n","excerpt":"Coming Soon!\n","ref":"/docs/tutorials/uscore-patient/","title":"US Core Patient Tutorial"},{"body":" Note This documentation assumes you have a SUSHI-compliant project structure and configuration as discussed in the previous sections.  Running SUSHI SUSHI is executed from the command line. The general form of the SUSHI execution command is as follows:\n sushi {specification-directory} {options} where options include the following (in any order):\n-o, --out \u003cout\u003e the path to the output directory (default: ./build) -s, --snapshot generate snapshot in StructureDefinition output (default: false) -d, --debug output extra debugging information (default: false) -v, --version output SUSHI version and implemented FSH specification version -h, --help output usage information  Tip If you run SUSHI from your FSH project directory, and accept the defaults, the command can be shortened to sushi .. NOTE: If your FSH project has a fsh subdirectory, SUSHI will default to fsh as the input location and fsh’s parent directory as the output location. This behavior is to support the IG Publisher integration.  Note By default, SUSHI only generates the profile differential, allowing the IG Publisher to create the profile snapshot. This is the approach recommended by HL7 FHIR leadership. If authors prefer, the -s option can be used to cause SUSHI to generate the snapshot without having to run the IG Publisher.  While SUSHI is running, it will print status messages as it processes your project files. When SUSHI has completed, you should receive a summary like the following:\n╔════════════════════════ SUSHI RESULTS ══════════════════════════╗ ║ ╭──────────┬────────────┬───────────┬─────────────┬───────────╮ ║ ║ │ Profiles │ Extensions │ ValueSets │ CodeSystems │ Instances │ ║ ║ ├──────────┼────────────┼───────────┼─────────────┼───────────┤ ║ ║ │ 1 │ 1 │ 1 │ 1 │ 1 │ ║ ║ ╰──────────┴────────────┴───────────┴─────────────┴───────────╯ ║ ║ ║ ║ See SUSHI-GENERATED-FILES.md for details on generated IG files. ║ ╠═════════════════════════════════════════════════════════════════╣ ║ O-fish-ally error free! 0 Errors 0 Warnings ║ ╚═════════════════════════════════════════════════════════════════╝ Error Messages In the process of developing your IG using FSH, you may encounter SUSHI error messages (written to the command console). Most error messages point to a specific line or lines in a .fsh file. If possible, SUSHI will continue, despite errors, to produce FHIR artifacts, but those artifacts may omit problematic rules. SUSHI should always exit gracefully. If SUSHI crashes, please report the issue using the SUSHI issue tracker.\nHere are some general tips for debugging:\n Parsing (syntax) errors should be fixed first. A single syntax error can ballooon into many other errors, so you should always eliminate syntax errors first. Syntax error messages may include extraneous input {x} expecting {y}, mismatched input {x} expecting {y} and no viable alternative at {x}. These messages indicate that the line in question is not a valid FSH statement. The order of keywords matters. The declarations must start with the type of item you are creating (e.g., Profile, Instance, ValueSet). The order of rules usually doesn’t matter, but there are exceptions. Slices and extensions must be created before they are constrained. Rules must contain valid paths. The No element found at path error means that although the overall grammar of the rule may be correct, SUSHI could not find the FHIR element you are referring to in the rule. Make sure there are no spelling errors, the element names in the path are correct, and you are using the path grammar correctly. The community can help. If you are getting an error you can’t resolve, you can ask for help on the #shorthand chat channel.  SUSHI Outputs Based on the inputs in FSH files, config.yaml, and the ig-data directory, SUSHI populates the output directory. For example, the customized-ig project from the Project Structure section would result in output like the following:\ncustomized-ig ├── fsh │ └── (fsh files) ├── ig.ini ├── input │ ├── ImplementationGuide-myIG.json │ ├── ignoreWarnings.txt │ ├── examples │ │ └── Patient-myPatient-example.json │ ├── extensions │ │ └── StructureDefinition-myExtension.json │ ├── images │ │ ├── myDocument.pdf │ │ ├── myGraphic.png │ │ └── mySpreadsheet.xlsx │ ├── includes │ │ └── menu.xml │ ├── pagecontent │ │ ├── index.md │ │ ├── mySecondPage.md │ │ ├── myThirdPage.md │ │ └── myFourthPage.md │ ├── profiles │ │ └── StructureDefinition-myProfile.json │ └── vocabulary │ ├── ValueSet-myValueSet.json │ └── CodeSystem-myCodeSystem.json └── package-list.json  Info SUSHI generates output into a directory called input, because it is generating input files for the IG Publisher. The IG Publisher requires this directory to be named input.  Note the following files and directories from the output:\n ig.ini: Copied from the fsh/ig-data directory, but can alternately be specified via the template property in fsh/config.yaml. input/ignoreWarnings.txt: Copied from the fsh/ig-data/input directory, but will be generated as a blank file if it isn’t found. input/examples*, input/extensions*, input/profiles*, input/vocabulary*: Generated from the definitions in the fsh/*.fsh files. input/images/*: Copied from the fsh/ig-data/input/images directory. input/includes/menu.xml: Copied from the fsh/ig-data/input/includes directory, but can alternately be specified via the menu property in fsh/config.yaml. input/pagecontent/*: Copied from the fsh/ig-data/input/pagecontent directory. Filenames with numeric prefixes will have the prefixes removed. package-list.json: Copied from the fsh/ig-data directory, but can alternately be specified via the history property in fsh/config.yaml.  Downloading the IG Publisher Note The following steps require the _updatePublisher.bat|sh and _genonce.bat|sh scripts in the output directory that SUSHI writes to. If these scripts are not present there, you will need to download them from the sample-ig project. The easiest way to do this is to download the sample-ig project, unzip it, and copy all of the .bat and .sh files to the directory that SUSHI writes to.  After running SUSHI, change directories to the output directory (if necessary). At the command prompt, enter:\n  _updatePublisher   ./_updatePublisher.sh This will download the latest version of the HL7 FHIR IG Publisher tool into the /build/input-cache directory. This step can be skipped if you already have the latest version of the IG Publisher tool in input-cache.\nTip If you are blocked by a firewall, or if for any reason _updatePublisher fails to execute, download the current IG Publisher jar file here. When the file has downloaded, move it into the input-cache directory (which you may need to create as a sibling to the input directory).  Running the IG Publisher Warning If you have never run the IG Publisher, you may need to install Jekyll first. See Installing the IG Publisher for details.  After the IG Publisher has been successfully downloaded, execute the following command to run it:\n  _genonce   ./_genonce.sh This will run the HL7 IG Publisher, which may take several minutes to complete. After the publisher is finished, open the file /output/index.html in a browser to see the resulting IG.\n","excerpt":" Note This documentation assumes you have a SUSHI-compliant project …","ref":"/docs/sushi/running/","title":"Running SUSHI"},{"body":"  #td-cover-block-0 { background-image: url(/about/featured_background_hudfd0b3e9605c9033f49fd31b029bda63_618493_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/about/featured_background_hudfd0b3e9605c9033f49fd31b029bda63_618493_1920x1080_fill_catmullrom_bottom_2.png); } }  About FSH A really simple, declarative language for creating FHIR Resources and Implementation Guides.        FHIR Shorthand (FSH) is a domain-specific language for defining the contents of FHIR Implementation Guides (IG). The language is specifically designed for this purpose, simple and compact, and allows the author to express their intent with fewer concerns about underlying FHIR mechanics. FSH can be created and updated using any text editor, and because it is text, it enables distributed, team-based development using source code control tools such as GitHub. To get started with FSH try it out online or get started with the SUSHI Command Line Interface.    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/about/","title":"About FSH"},{"body":"  Coming Soon! FSH Online is still under construction, check back soon for an o-fish-al release.    ","excerpt":"  Coming Soon! FSH Online is still under construction, check back soon …","ref":"/coming-soon/","title":"Coming Soon"},{"body":"","excerpt":"","ref":"/community/","title":"Community"},{"body":"Here you will find documentation on how to get started using FSH to create Implementation Guides. Head to Getting Started for some background information on FSH and FHIR. If you’re ready to start writing some FSH, go to SUSHI to learn about the SUSHI compiler for FSH. If you want to dive right into creating an Implementation Guide, check out the Tutorials for full instructions on making an Implementation Guide using FSH and SUSHI.\n","excerpt":"Here you will find documentation on how to get started using FSH to …","ref":"/docs/","title":"Documentation"},{"body":"  #td-cover-block-0 { background-image: url(/featured_background_hu0fbf8b673aa432123d80e67a1cc71dbd_1213513_960x540_fill_catmullrom_top_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured_background_hu0fbf8b673aa432123d80e67a1cc71dbd_1213513_1920x1080_fill_catmullrom_top_2.png); } }  Welcome to FSH School Learn More   Experiment   The place to learn and try FHIR Shorthand\n\n        FHIR Shorthand (FSH) is a domain-specific language for defining the contents of FHIR Resources and Implementation Guides. Explore FSH School to get the knowledge you need to get started using FSH.       Declarative FSH allows you to define FHIR profiles in a simple, declarative language. No more large JSON files or spreadsheets, just human-readable text files which compile to the FHIR artifacts you need.\n   Source control ready Unlike other tools for profiling FHIR, FSH works seamlessly with source control tools like GitHub. Maintain a history of changes, track contributions, and maintain agility by using FSH with source control.\n   State of the art The FSH Specification is continuously being improved to give users a better experience. Take a look at the official FSH specification for more information about how FSH can be used to profile FHIR.\n     “FSH has legs.”\n - Grahame Grieve, FHIR Product Director\n “An immensely useful project.”\n - Richard Kavanagh, Product Manager for Interoperability, Graphnet Health, Board Member HL7 UK and INTEROPen\n “The ability to create implementation guides, value sets, code systems, any sample resource you might ever want in this simple language is simply fantastic.”\n - Keith Boone, Informatics Adept at Audacious Inquiry\n “FSH is a joy.”\n - David Hay, “Hay on FHIR” blog\n    ","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","title":"FSH School"},{"body":"","excerpt":"","ref":"/search/","title":"Search Results"}]